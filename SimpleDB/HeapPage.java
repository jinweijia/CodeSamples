package simpledb;

import java.util.*;
import java.io.*;
import java.math.*;
import java.lang.Integer;
import java.lang.Byte;

/**
 * Each instance of HeapPage stores data for one page of HeapFiles and 
 * implements the Page interface that is used by BufferPool.
 *
 * @see HeapFile
 * @see BufferPool
 *
 */
public class HeapPage implements Page {

    HeapPageId pid;
    Tuple tuples[];
    byte[] oldData;
    private boolean dirty=false;
    private TransactionId dirtyTransac;
    int numSlots;

    /** A tupleDesc object to describe the tuples in this HeapPage*/
    TupleDesc td;

    /** Byte array containing header bytes which indicate whether slots are empty*/
    byte header[];    
    

    /**
     * Create a HeapPage from a set of bytes of data read from disk.
     * The format of a HeapPage is a set of header bytes indicating
     * the slots of the page that are in use, some number of tuple slots.
     *  Specifically, the number of tuples is equal to: <p>
     *          floor((BufferPool.PAGE_SIZE*8) / (tuple size * 8 + 1))
     * <p> where tuple size is the size of tuples in this
     * database table, which can be determined via {@link Catalog#getTupleDesc}.
     * The number of 8-bit header words is equal to:
     * <p>
     *      ceiling(no. tuple slots / 8)
     * <p>
     * @see Database#getCatalog
     * @see Catalog#getTupleDesc
     * @see BufferPool#PAGE_SIZE
     */
    public HeapPage(HeapPageId id, byte[] data) throws IOException {
        this.pid = id;
        this.td = Database.getCatalog().getTupleDesc(id.getTableId());      
	this.numSlots = getNumTuples();  
        DataInputStream dis = new DataInputStream(new ByteArrayInputStream(data));

        // allocate and read the header slots of this page
        header = new byte[getHeaderSize()];
        for (int i=0; i<header.length; i++)
            header[i] = dis.readByte();

        try{
            // allocate and read the actual records of this page
            tuples = new Tuple[numSlots];
            for (int i=0; i<tuples.length; i++)
                tuples[i] = readNextTuple(dis,i);
        }catch(NoSuchElementException e){
            e.printStackTrace();
        }
        dis.close();

        setBeforeImage();
    }

    /** Retrieve the number of tuple slots in this page.
        @return the number of tuple slots in this page
    */
    private int getNumTuples() {        
 	int tupleSize = td.getSize();
	int numTuples = (int) Math.floor((BufferPool.PAGE_SIZE*8) / (tupleSize * 8 + 1));
	return numTuples;
    }

    /**
     * Computes the number of bytes in the header of a page in a HeapFile with each tuple occupying tupleSize bytes
     * @return the number of bytes in the header of a page in a HeapFile with each tuple occupying tupleSize bytes
     */
    private int getHeaderSize() {                
        
	return (int) Math.ceil(this.getNumTuples() / (double) 8);        
                 
    }
    
    /** Return a view of this page before it was modified
        -- used by recovery */
    public HeapPage getBeforeImage(){
        try {
            return new HeapPage(pid,oldData);
        } catch (IOException e) {
            e.printStackTrace();
            //should never happen -- we parsed it OK before!
            System.exit(1);
        }
        return null;
    }
    
    public void setBeforeImage() {
        oldData = getPageData().clone();
    }

    /**
     * @return the PageId associated with this page.
     */
    public HeapPageId getId() {
	return pid;
    }

    /**
     * Suck up tuples from the source file.
     */
    private Tuple readNextTuple(DataInputStream dis, int slotId) throws NoSuchElementException {
        // if associated bit is not set, read forward to the next tuple, and
        // return null.
        if (!isSlotUsed(slotId)) {
            for (int i=0; i<td.getSize(); i++) {
                try {
                    dis.readByte();
                } catch (IOException e) {
                    throw new NoSuchElementException("error reading empty tuple");
                }
            }
            return null;
        }

        // read fields in the tuple
        Tuple t = new Tuple(td);
        RecordId rid = new RecordId(pid, slotId);
        t.setRecordId(rid);
        try {
            for (int j=0; j<td.numFields(); j++) {
                Field f = td.getFieldType(j).parse(dis);
                t.setField(j, f);
            }
        } catch (java.text.ParseException e) {
            e.printStackTrace();
            throw new NoSuchElementException("parsing error!");
        }

        return t;
    }

    /**
     * Generates a byte array representing the contents of this page.
     * Used to serialize this page to disk.
     * <p>
     * The invariant here is that it should be possible to pass the byte
     * array generated by getPageData to the HeapPage constructor and
     * have it produce an identical HeapPage object.
     *
     * @see #HeapPage
     * @return A byte array correspond to the bytes of this page.
     */
    public byte[] getPageData() {
        int len = BufferPool.PAGE_SIZE;
        ByteArrayOutputStream baos = new ByteArrayOutputStream(len);
        DataOutputStream dos = new DataOutputStream(baos);

        // create the header of the page
        for (int i=0; i<header.length; i++) {
            try {
                dos.writeByte(header[i]);
            } catch (IOException e) {
                // this really shouldn't happen
                e.printStackTrace();
            }
        }

        // create the tuples
        for (int i=0; i<tuples.length; i++) {

            // empty slot
            if (!isSlotUsed(i)) {
                for (int j=0; j<td.getSize(); j++) {
                    try {
                        dos.writeByte(0);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                }
                continue;
            }

            // non-empty slot
            for (int j=0; j<td.numFields(); j++) {
                Field f = tuples[i].getField(j);
                try {
                    f.serialize(dos);
                
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        // padding
        int zerolen = BufferPool.PAGE_SIZE - (header.length + td.getSize() * tuples.length); //- numSlots * td.getSize();
        byte[] zeroes = new byte[zerolen];
        try {
            dos.write(zeroes, 0, zerolen);
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            dos.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return baos.toByteArray();
    }

    /**
     * Static method to generate a byte array corresponding to an empty
     * HeapPage.
     * Used to add new, empty pages to the file. Passing the results of
     * this method to the HeapPage constructor will create a HeapPage with
     * no valid tuples in it.
     *
     * @return The returned ByteArray.
     */
    public static byte[] createEmptyPageData() {
        int len = BufferPool.PAGE_SIZE;
        return new byte[len]; //all 0
    }

    /**
     * Delete the specified tuple from the page;  the tuple should be updated to reflect
     *   that it is no longer stored on any page.
     * @throws DbException if this tuple is not on this page, or tuple slot is
     *         already empty.
     * @param t The tuple to delete
     */
    public void deleteTuple(Tuple t) throws DbException {
        // some code goes here

	RecordId rec = t.getRecordId();

	if (rec == null || rec.getPageId() != this.pid) {
	    throw new DbException("Error in HeapPage.deleteTuple : tuple not on this page");
	}

	int slotId = rec.tupleno();

	if (!isSlotUsed(slotId)) {
	    throw new DbException("Error in HeapPage.deleteTuple : tuple not in specified slot");
	}

	markSlotUsed(slotId, false);
	tuples[slotId] = null;
	
	t.setRecordId(new RecordId(null, -1));

    }

    /**
     * Adds the specified tuple to the page;  the tuple should be updated to reflect
     *  that it is now stored on this page.
     * @throws DbException if the page is full (no empty slots) or tupledesc
     *         is mismatch.
     * @param t The tuple to add.
     */
    public void insertTuple(Tuple t) throws DbException {
        // some code goes here

	if (this.getNumEmptySlots() == 0 || !this.td.equals(t.getTupleDesc())) {
	    throw new DbException("Error in HeapPage.insertTuple : page is full or tupledesc is mismatch");
	}
	int slotId = numSlots - getNumEmptySlots();

	assert(!isSlotUsed(slotId));
	markSlotUsed(slotId, true);
	this.tuples[slotId] = t;
	t.setRecordId(new RecordId(this.pid, slotId));

    }

    /**
     * Marks this page as dirty/not dirty and record that transaction
     * that did the dirtying 
     */
    public void markDirty(boolean dirty, TransactionId tid) {
        // some code goes here

	this.dirty = dirty;
	this.dirtyTransac = tid;
    }

    /**
     * Returns the tid of the transaction that last dirtied this page, or null if the page is not dirty
     */
    public TransactionId isDirty() {
        // some code goes here

	if (dirty) {
	    return dirtyTransac;
	} else {
	    return null;
	}      
    }

    /**
     * Returns the number of empty slots on this page.
     */
    public int getNumEmptySlots() {
        int counter = 0;
	for (int i=0; i < this.getNumTuples(); i++) {
	    // Iterate through all slots and check whether slot is used. Increment counter if used.
	    if (!isSlotUsed(i)) {
		counter++;
	    }
	}
        return counter;
    }

    /**
     * Returns true if associated slot on this page is filled.
     */
    public boolean isSlotUsed(int i) {
	// Calculate index in header[] to get the headerByte containing the bit
	int headerIndex = i/8;

	// Calculate the offset of the bit in the headerByte
	int bitOffset = i%8; 

	byte slotByte = header[headerIndex];

	// Check if the specific bit is 1 or 0
	int used = (slotByte >> bitOffset) & 1;
	return (used == 1);
    }

    /**
     * Abstraction to fill or clear a slot on this page.
     *@param i
     *      Slot number which we are inquiring about
     *@param value
     *      Whether to mark the slot used or not. True if we are marking the slot used. False otherwise.
     */
    private void markSlotUsed(int i, boolean value) {
        // some code goes here

	int headerIndex = i/8;
	int bitOffset = i%8; 
	byte slotByte = header[headerIndex];
	
	// Set bit to 1 to mark slot used, set bit to 0 otherwise
	if (value) {
	    slotByte = (byte) (slotByte | (1 << bitOffset));
	} else {
	    slotByte = (byte) (slotByte & ~(1 << bitOffset));
	}

	header[headerIndex] = slotByte;
    }

    /**
     * @return an iterator over all tuples on this page (calling remove on this iterator throws an UnsupportedOperationException)
     * (note that this iterator shouldn't return tuples in empty slots!)
     */
    public Iterator<Tuple> iterator() {
        TupleArray tup = new TupleArray();
        return tup.iterator();
    }

    /**
     * A tuple array object that can be iterated over
     * */
    public class TupleArray implements Iterable<Tuple> {

	public TupleArray() {
	    
	}

	public Iterator<Tuple> iterator() {
	    return new TupleIterator();
	}    

	/**
	 * An iterator object for TupleArray object
	 * */
	class TupleIterator implements Iterator<Tuple> {
	   
	    private int index;	    

	    public TupleIterator() {
		index = 0;		
	    }
	   
	    public boolean hasNext() {
	    
		for (int i = index;i < numSlots; i++) {
		    if (!isSlotUsed(i)) {
			continue;
		    }else{
			return true;
		    }
		}
	      
		return false;
	    }

	    public Tuple next() throws NoSuchElementException {
		
		for (;index < numSlots; index++) {	    
		    
		    if (!isSlotUsed(index)) {
			continue;
		    }else{
			
			Tuple temptuple = tuples[index];
			++index;
			return temptuple;
		    }
		}
	     
		throw new NoSuchElementException();
	    }
	    
	    public void remove() throws UnsupportedOperationException {
		throw new UnsupportedOperationException();
	    }
	}
    }

}

