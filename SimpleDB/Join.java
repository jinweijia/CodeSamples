package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    JoinPredicate _joinPred;
    DbIterator _child1;
    DbIterator _child2;
    TupleDesc _td1;
    TupleDesc _td2;
    TupleDesc newTD;
    Tuple current1;
    Tuple current2;
    boolean followup = false;

    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        _joinPred = p;
	_child1 = child1;
	_child2 = child2;
	_td1 = _child1.getTupleDesc();
	_td2 = _child2.getTupleDesc();
	newTD = this.getTupleDesc();
    }

    public JoinPredicate getJoinPredicate() {       
        return _joinPred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
	
	int field1 = _joinPred.getField1();
        return _child1.getTupleDesc().getFieldName(field1);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        
	int field2 = _joinPred.getField2();
        return _child2.getTupleDesc().getFieldName(field2);
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
	// ArrayList<String> fieldNames = new ArrayList<String>();
	// ArrayList<Type> types = new ArrayList<Type>();
	// for (int i=0; i < _td1.numFields(); i++) {
	//     fieldNames.add(_td1.getFieldName(i));
	//     types.add(_td1.getFieldType(i));
	// }	
	// for (int i=0; i < _td2.numFields(); i++) {
	//     if (!fieldNames.contains(_td2.getFieldName(i))) {
	// 	fieldNames.add(_td2.getFieldName(i));
	// 	types.add(_td2.getFieldType(i));
	//     }
	// }
        // return new TupleDesc(types.toArray(new Type[]{}), fieldNames.toArray(new String[]{}));
	return TupleDesc.merge(_child1.getTupleDesc(), _child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        _child1.open();
	_child2.open();
	super.open();
    }

    public void close() {
	super.close();
	_child2.close();
        _child1.close();
	
    }

    public void rewind() throws DbException, TransactionAbortedException {
        _child1.rewind();
	_child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here

	if (followup) {
	    followup = false;
	    assert(current1 != null);
	    while(_child2.hasNext()) {
		current2 = _child2.next();
		if (_joinPred.filter(current1, current2)) {		    	    
		    return joinTuple(getTupleDesc(), current1, current2);
		}
	    }
	    _child2.rewind();
	}

	while (_child1.hasNext()) {
	    current1 = _child1.next();
	    while(_child2.hasNext()) {
		current2 = _child2.next();
		if (_joinPred.filter(current1, current2)) {		    	    
		    return joinTuple(getTupleDesc(), current1, current2);
		}
	    }	 
	    _child2.rewind();   
	}
	    
        return null;
    }

    // Merge the two tuples
    private Tuple joinTuple(TupleDesc td, Tuple t1, Tuple t2) throws TransactionAbortedException, DbException {
	Tuple newtup = new Tuple(td);
	for (int i=0; i < _child1.getTupleDesc().numFields(); i++) {
	    newtup.setField(i, t1.getField(i));
	}	
	int offset = _child1.getTupleDesc().numFields();
	for (int i=0; i < _child2.getTupleDesc().numFields(); i++) {
	    newtup.setField(i+offset, t2.getField(i));
	}
	if (_child2.hasNext()) {
	    followup = true;
	} else {
	    _child2.rewind();
	}
	return newtup;
    }


    @Override
    public DbIterator[] getChildren() {
        // some code goes here

        return new DbIterator[] { this._child1, this._child2 };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here

	this._child1 = children[0];
	this._child2 = children[1];
    }

}
